name: CI for Pull Requests

# Trigger the workflow on pull requests and pushes to main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define the jobs
jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"] # Test across supported Python versions
      fail-fast: false # Continue testing other versions even if one fails

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

        # Install Poetry manually
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version 2.1.1
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Cache Poetry dependencies
      - name: Cache Poetry dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Install dependencies if cache misses occur
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --with dev

      # Run Ruff for linting
      - name: Run Ruff linting
        run: |
          poetry run ruff check .

      # Run Ruff for formatting check
      - name: Check formatting with Ruff
        run: |
          poetry run ruff format . --check

      # Run MyPy for type checking
      - name: Run MyPy
        run: |
          poetry run mypy .

      # Run tests with Pytest
      - name: Run Pytest
        run: |
          poetry run pytest
